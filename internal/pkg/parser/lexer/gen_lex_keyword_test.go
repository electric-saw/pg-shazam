// Code generated by go generate; DO NOT EDIT.

package lexer

import (
	"fmt"
	"testing"
)

//gocyclo:ignore
var lexKeywordTestData = map[string]string{
	keywordAlter:     "alter",
	keywordAnd:       "and",
	keywordAs:        "as",
	keywordBegin:     "begin",
	keywordBool:      "bool",
	keywordBy:        "by",
	keywordCascade:   "cascade",
	keywordCommit:    "commit",
	keywordCreate:    "create",
	keywordCross:     "cross",
	keywordDate:      "date",
	keywordDatetime:  "datetime",
	keywordDay:       "day",
	keywordDelete:    "delete",
	keywordDrop:      "drop",
	keywordFloat:     "float",
	keywordFrom:      "from",
	keywordFull:      "full",
	keywordHash:      "hash",
	keywordHour:      "hour",
	keywordIn:        "in",
	keywordInner:     "inner",
	keywordInsert:    "insert",
	keywordInt:       "int",
	keywordInterval:  "interval",
	keywordInto:      "into",
	keywordIs:        "is",
	keywordJoin:      "join",
	keywordLeft:      "left",
	keywordLike:      "like",
	keywordMinute:    "minute",
	keywordMonth:     "month",
	keywordNot:       "not",
	keywordNull:      "null",
	keywordOn:        "on",
	keywordOr:        "or",
	keywordOuter:     "outer",
	keywordRight:     "right",
	keywordSecond:    "second",
	keywordSelect:    "select",
	keywordSet:       "set",
	keywordString:    "string",
	keywordTable:     "table",
	keywordText:      "text",
	keywordTime:      "time",
	keywordTimestamp: "timestamp",
	keywordTo:        "to",
	keywordUpdate:    "update",
	keywordUsing:     "using",
	keywordValues:    "values",
	keywordWhere:     "where",
	keywordYear:      "year",
}

func TestLexKeyword(t *testing.T) {
	for tk, s := range lexKeywordTestData {
		token, _, found := lexKeyword(s, cursor{})
		if !found {
			t.Errorf(fmt.Sprintf("token %s (%s) not found", tk, s))
		} else if token.Kind != KindKeyword {
			t.Errorf(fmt.Sprintf("token is %d, expected %d", token.Kind, KindKeyword))
		} else if token.Value != tk {
			t.Errorf(fmt.Sprintf("token value is %s, expected %s", token.Value, tk))
		}
	}
}

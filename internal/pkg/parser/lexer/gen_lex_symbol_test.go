// Code generated by go generate; DO NOT EDIT.

package lexer

import (
	"fmt"
	"testing"
)

//gocyclo:ignore
var lexSymbolTestData = map[string]string{
	SymbolAmp:       "&",
	SymbolColon:     ":",
	SymbolComma:     ",",
	SymbolConcat:    "||",
	SymbolDiv:       "/",
	SymbolDot:       ".",
	SymbolEq:        "=",
	SymbolGt:        ">",
	SymbolGte:       ">=",
	SymbolLParen:    "(",
	SymbolLt:        "<",
	SymbolLte:       "<=",
	SymbolMinus:     "-",
	SymbolMod:       "%",
	SymbolMul:       "*",
	SymbolNeq:       "!=",
	SymbolPlus:      "+",
	SymbolRParen:    ")",
	SymbolSemicolon: ";",
}

func TestLexSymbol(t *testing.T) {
	for tk, s := range lexSymbolTestData {
		token, _, found := lexSymbol(s, cursor{})
		if !found {
			t.Errorf(fmt.Sprintf("token %s (%s) not found", tk, s))
		} else if token.Kind != KindSymbol {
			t.Errorf(fmt.Sprintf("token is %d, expected %d", token.Kind, KindSymbol))
		} else if token.Value != tk {
			t.Errorf(fmt.Sprintf("token value is %s, expected %s", token.Value, tk))
		}
	}
}
